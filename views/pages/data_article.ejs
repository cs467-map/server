<h1 id="city-data">City Data</h1>
<p>Downloaded from natural earth.</p>
<p>Used <code>shp2pgsql</code> to convert the shapefile into a postgresql query/instert file. Used <code>psql -f thatfile.sql</code> to get it into a temp database</p>
<p>Created country table with</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">CREATE</span> <span class="kw">TABLE</span> country(<span class="kw">id</span> SERIAL <span class="kw">NOT</span> <span class="kw">NULL</span>, name <span class="dt">VARCHAR</span>(<span class="dv">100</span>), code <span class="dt">VARCHAR</span>(<span class="dv">3</span>));</a></code></pre></div>
<p>Inserted from DB with</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">INSERT</span> <span class="kw">INTO</span> country (name, code) <span class="kw">SELECT</span> DISTNICT(sov0name) <span class="kw">as</span> name, sov_a3 <span class="kw">as</span> code <span class="kw">FROM</span> temptable;</a></code></pre></div>
<p>Created city table with</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">CREATE</span> <span class="kw">TABLE</span> city (<span class="kw">id</span> SERIAL <span class="kw">NOT</span> <span class="kw">NULL</span>, name <span class="dt">VARCHAR</span>(<span class="dv">100</span>), country\_id</a>
<a class="sourceLine" id="cb3-2" title="2"><span class="dt">INTEGER</span> <span class="kw">REFERENCES</span> country(<span class="kw">id</span>), lat <span class="dt">NUMERIC</span>, lng <span class="dt">NUMERIC</span>);</a></code></pre></div>
<p>Inserted with</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">INSERT</span> <span class="kw">INTO</span> city(name, country\_id, lat, lng) </a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">SELECT</span> temptable.name,c.<span class="kw">id</span>, latitude, longitude </a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">FROM</span> temptable </a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">JOIN</span> country <span class="kw">AS</span> c <span class="kw">ON</span> temptable.sov0name <span class="op">=</span> c.name;</a></code></pre></div>
<p>Copied these with <code>\copy (SELECT * FROM country)</code> to <code>'\Users\user\...\MyFileName.csv\' with csv</code></p>
<h1 id="beaches">Beaches</h1>
<p>Using coastline data from the natural earth site, I have created a table using <code>shp2pgsql</code>.</p>
<p>Then, I created a temp table from the city data, with postgis point geoms instead of lon/lat, using <code>ST_MakePoint(lon, lat)</code> Since this was actually wrong, and had no srid, I had to</p>
<p>Then, I merged these tables and used the <code>ST_DWithin</code> function from postgis with the following command:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">ALTER</span> <span class="kw">TABLE</span> st_setsrid</a>
<a class="sourceLine" id="cb5-2" title="2"><span class="kw">ALTER</span> <span class="kw">TABLE</span> coastline</a>
<a class="sourceLine" id="cb5-3" title="3"><span class="kw">ALTER</span> <span class="kw">COLUMN</span> geom <span class="kw">TYPE</span> geometry(MULTILINESTRING, <span class="dv">4326</span>)</a>
<a class="sourceLine" id="cb5-4" title="4"><span class="kw">USING</span> ST_SetSRID(geom,<span class="dv">4326</span>)</a>
<a class="sourceLine" id="cb5-5" title="5"></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="kw">SELECT</span> <span class="kw">id</span>, ST_SetSRID(ST_MakePoint(lon, lat), <span class="dv">4326</span>) </a>
<a class="sourceLine" id="cb5-7" title="7"><span class="kw">INTO</span> <span class="kw">TABLE</span> citygeom <span class="kw">FROM</span> city;</a>
<a class="sourceLine" id="cb5-8" title="8"></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="kw">SELECT</span> <span class="kw">DISTINCT</span>(cg.<span class="kw">id</span>), <span class="fu">COALESCE</span>(ST_DWithin(cl.geom<span class="ch">:geography</span>, cg.st_setsrid:<span class="ch">:geography</span>, <span class="dv">80000</span>), <span class="kw">false</span>) </a>
<a class="sourceLine" id="cb5-10" title="10"><span class="kw">INTO</span> <span class="kw">TABLE</span> beaches <span class="kw">FROM</span> coastline cl </a>
<a class="sourceLine" id="cb5-11" title="11"><span class="kw">RIGHT</span> <span class="kw">JOIN</span> citygeom cg <span class="kw">ON</span> ST_DWithin(cl.geom:<span class="ch">:geography</span>, cg.st_setsrid:<span class="ch">:geography</span>, <span class="dv">80000</span>);</a></code></pre></div>
<h1 id="technologies">Technologies</h1>
<p>This project was completed using <a href="https://www.postgresql.org/download/">PostgreSQL</a> wriuth the <a href="https://postgis.net/install/">PostGIS</a> extension</p>
<h1 id="cities-and-countries">Cities and Countries</h1>
<p>City data was downloaded from <a href="https://www.naturalearthdata.com/">Natural Earth</a>, selecting the highest resolution data. "Populated Places" was the data item chosen.</p>
<p>Using the commandline program shp2pgsql, the shapefile is converted into a SQL file. Using the command <code>shp2pgsql ne\_10m\_populated\_places.shp public.populatedplaces \&gt; populatedplace.sql</code> I was able to create a SQL file that would create a new table, populatedplaces, into the public schema of my database.</p>
<p>This data contained some different characters than what were standard on windwos, so in psql ([psql -U postgres] ) I was able to set the encoding to UTF8 with [SET CLIENT_ENCODING TO UTF8;]</p>
<p>From here, I moved on to creating two tables, a country table, and a city table. The country table would have the attributes "id" and "name". The city table would have the attributes "id", "name", "country" (A foreign key), and "lat" and "lon" which would be used to represent the city points, and eventually to place markers on the map, using OpenLayers 5.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">SELECT</span> <span class="kw">DISTINCT</span>(sov0name) <span class="kw">FROM</span> populatedplaces <span class="kw">INTO</span> <span class="kw">TABLE</span> country;</a>
<a class="sourceLine" id="cb6-2" title="2"></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="kw">ALTER</span> <span class="kw">TABLE</span> country <span class="kw">ADD</span> <span class="kw">COLUMN</span> <span class="kw">id</span> SERIAL;</a></code></pre></div>
<p>The second statement is to create ids for each country, which will be used for foreign keys.</p>
<p>Then, for cities.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">SELECT</span> p.name, c.<span class="kw">id</span> <span class="kw">AS</span> country, p.latitude <span class="kw">AS</span> lat, p.longitude <span class="kw">AS</span> lon</a>
<a class="sourceLine" id="cb7-2" title="2"><span class="kw">INTO</span> <span class="kw">TABLE</span> city <span class="kw">FROM</span> populatedplaces p <span class="kw">LEFT</span> <span class="kw">JOIN</span> country c <span class="kw">ON</span> p.sov0name <span class="op">=</span> c.name; </a>
<a class="sourceLine" id="cb7-3" title="3"><span class="kw">ALTER</span> <span class="kw">TABLE</span> city <span class="kw">ADD</span> <span class="kw">COLUMN</span> <span class="kw">id</span> SERIAL;</a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">ALTER</span> <span class="kw">TABLE</span> city <span class="kw">ADD</span> <span class="kw">CONSTRAINT</span> <span class="kw">key</span> <span class="kw">FOREIGN</span> <span class="kw">KEY</span> (country) <span class="kw">REFERENCES</span> country (<span class="kw">id</span>) MATCH <span class="kw">FULL</span>;</a></code></pre></div>
<p>It is useful to have these tables saved elsewhere in a short form, to be able to be shared. This was done with the '\copy' command, still on the psql command line</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb8-1" title="1">\\<span class="kw">copy</span> (<span class="kw">SELECT</span> \<span class="op">*</span> <span class="kw">FROM</span> country) <span class="kw">to</span></a>
<a class="sourceLine" id="cb8-2" title="2">\<span class="st">&#39;</span><span class="ch">\\</span><span class="st">Users</span><span class="ch">\\</span><span class="st">user</span><span class="ch">\\</span><span class="st">\...</span><span class="ch">\\</span><span class="st">MyFileName.csv\&#39;</span> <span class="kw">with</span> csv</a></code></pre></div>
<p>A similar command was used for the city table.</p>
<p>Small side note, the ID columns were out of order from how I wanted them, so I opened the csv files in a spreadsheet application, and manually copy and pasted in order to switch the columns</p>
<p>It is also useful to save a SQL file to easily import these into a new database. A file named 'data.sql' was created, and had these commands added to it:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb9-1" title="1">\\<span class="kw">copy</span> Country(<span class="kw">id</span>, Name) <span class="kw">FROM</span> \<span class="st">&#39;data/country.csv\&#39;</span> DELIMITER \<span class="st">&#39;,\&#39;</span> CSV <span class="kw">HEADER</span>;</a>
<a class="sourceLine" id="cb9-2" title="2">\\<span class="kw">copy</span> City(<span class="kw">id</span>, name, lat, lon, Country) <span class="kw">FROM</span> \<span class="st">&#39;data/city.csv\&#39;</span> DELIMITER \<span class="st">&#39;,\&#39;</span> CSV <span class="kw">HEADER</span>;</a></code></pre></div>
<h1 id="beaches-1">Beaches</h1>
<p>The goal for this table was to find the cities that are close to the beach. To do this, coastline data was downloaded from the same Natural Earth website, and the highest resolution (10m) vector data was downloaded, called "Coastlines." What defines close to the beach, for our purposes? We decided that within 40 miles from city center to coastline would be reasonable for now, until we have more user feedback. For reference, 40 miles is about 64,000 meters, which is what will be used in the ST_DWithin() PostGIS function.</p>
<p>In order to accomplish this goal, a temporary table was created, in order to have fast access to PostGIS GEOMETRIES, rather than having to convert from Latitudes and Longitudes in the main function. The main function took over an hour to run on my machine, so time savings was beneficial.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">SELECT</span> <span class="kw">id</span>, ST\_SetSRID(ST\_MakePoint(lon, lat), <span class="dv">4326</span>) <span class="kw">INTO</span> TEMP <span class="kw">TABLE</span></a>
<a class="sourceLine" id="cb10-2" title="2">citygeom <span class="kw">FROM</span> city;</a>
<a class="sourceLine" id="cb10-3" title="3"><span class="kw">ALTER</span> <span class="kw">TABLE</span> citygeom <span class="kw">RENAME</span> <span class="kw">COLUMN</span></a>
<a class="sourceLine" id="cb10-4" title="4">st\_setsrid <span class="kw">TO</span> geom;</a></code></pre></div>
<p>Coastline data was entered into the database using the .sql file created by the shp2pgsql command line executable. I then altered the table to make sure that the SRIDs were the same for both geometries. The ST_DWithin() PostGIS function actually needs the vector data as geographies to caculate distances in meters, so they were convereted using two colons like: table.geom::geography</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb11-1" title="1"><span class="kw">ALTER</span> <span class="kw">TABLE</span> coastline <span class="kw">ALTER</span> <span class="kw">COLUMN</span> geom <span class="kw">TYPE</span> geometry(MULTILINESTRING,</a>
<a class="sourceLine" id="cb11-2" title="2"><span class="dv">4326</span>) <span class="kw">USING</span> ST\_SetSRID(geom,<span class="dv">4326</span>)</a>
<a class="sourceLine" id="cb11-3" title="3"> <span class="kw">SELECT</span></a>
<a class="sourceLine" id="cb11-4" title="4"><span class="kw">DISTINCT</span>(cg.<span class="kw">id</span>), <span class="fu">COALESCE</span>(ST\_DWithin(cl.geom<span class="ch">:geography</span>,</a>
<a class="sourceLine" id="cb11-5" title="5">cg.geom:<span class="ch">:geography</span>, <span class="dv">64000</span>), <span class="kw">false</span>) <span class="kw">INTO</span> <span class="kw">TABLE</span> beaches <span class="kw">FROM</span> coastline cl</a>
<a class="sourceLine" id="cb11-6" title="6"><span class="kw">RIGHT</span> <span class="kw">JOIN</span> citygeom cg <span class="kw">ON</span> ST\_DWithin(cl.geom:<span class="ch">:geography</span>,</a>
<a class="sourceLine" id="cb11-7" title="7">cg.geom:<span class="ch">:geography</span>, <span class="dv">64000</span>); </a></code></pre></div>
<h1 id="elevation">Elevation</h1>
<p>Elevation was obtained from the public dataset GTOPO30, downloaded from <a href="https://earthexplorer.usgs.gov/">Earth Explorer</a>. You are required to make an account, download both java, and a bulk download application, and then place an order, though the information is public and free. This data was slected over newer, more accurate information, because of the size of the download. Uncompressed, this elevation raster data was 1.5 GB, which was less than 10% of the size of the newer GTOPO2010 data. This raster data was imported into postgis with the raster2pgsql function. Using the same city geometries table as before, I was able to get elevation data for each of those points. Perhaps someone can share with me a faster way, as this query took 2 hours to compute on my machine.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb12-1" title="1"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST\_Value(e.rast, c.geom) <span class="kw">AS</span> elevation <span class="kw">INTO</span> <span class="kw">TABLE</span> elevationdata <span class="kw">FROM</span> citygeom c <span class="kw">LEFT</span> <span class="kw">JOIN</span> elevationRaster e <span class="kw">ON</span> ST\_Contains(ST\_Envelope(e.rast), c.geom);</a></code></pre></div>
