<h1 id="our-data-journey">Our Data Journey</h1>
<p>This article details our process gathering data from a variety of sources, and cleaning it and combining it, and turning into something we can use, to share information about cities from around the globe.</p>
<h2 id="technologies">Technologies</h2>
<p>This project was completed using <a href="https://www.postgresql.org/download/">PostgreSQL</a> wriuth the <a href="https://postgis.net/install/">PostGIS</a> extension</p>
<h1 id="city-data">City Data</h1>
<p>Downloaded from natural earth.</p>
<p>Used <code>shp2pgsql</code> to convert the shapefile into a postgresql query/instert file. Used <code>psql -f thatfile.sql</code> to get it into a temp database</p>
<p>Created country table with</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">CREATE</span> <span class="kw">TABLE</span> country(<span class="kw">id</span> SERIAL <span class="kw">NOT</span> <span class="kw">NULL</span>, name <span class="dt">VARCHAR</span>(<span class="dv">100</span>), code <span class="dt">VARCHAR</span>(<span class="dv">3</span>));</a></code></pre></div>
<p>Inserted from DB with</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">INSERT</span> <span class="kw">INTO</span> country (name, code) <span class="kw">SELECT</span> DISTNICT(sov0name) <span class="kw">as</span> name, sov_a3 <span class="kw">as</span> code <span class="kw">FROM</span> temptable;</a></code></pre></div>
<p>Created city table with</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">CREATE</span> <span class="kw">TABLE</span> city (<span class="kw">id</span> SERIAL <span class="kw">NOT</span> <span class="kw">NULL</span>, name <span class="dt">VARCHAR</span>(<span class="dv">100</span>), country\_id</a>
<a class="sourceLine" id="cb3-2" title="2"><span class="dt">INTEGER</span> <span class="kw">REFERENCES</span> country(<span class="kw">id</span>), lat <span class="dt">NUMERIC</span>, lng <span class="dt">NUMERIC</span>);</a></code></pre></div>
<p>Inserted with</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">INSERT</span> <span class="kw">INTO</span> city(name, country\_id, lat, lng) </a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">SELECT</span> temptable.name,c.<span class="kw">id</span>, latitude, longitude </a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">FROM</span> temptable </a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">JOIN</span> country <span class="kw">AS</span> c <span class="kw">ON</span> temptable.sov0name <span class="op">=</span> c.name;</a></code></pre></div>
<p>Copied these with <code>\copy (SELECT * FROM country)</code> to <code>'\Users\user\...\MyFileName.csv\' with csv</code></p>
<h1 id="cities-and-countries">Cities and Countries</h1>
<p>City data was downloaded from <a href="https://www.naturalearthdata.com/">Natural Earth</a>, selecting the highest resolution data. "Populated Places" was the data item chosen.</p>
<p>Using the commandline program shp2pgsql, the shapefile is converted into a SQL file. Using the command <code>shp2pgsql ne\_10m\_populated\_places.shp public.populatedplaces \&gt; populatedplace.sql</code> I was able to create a SQL file that would create a new table, populatedplaces, into the public schema of my database.</p>
<p>This data contained some different characters than what were standard on windwos, so in psql ([psql -U postgres] ) I was able to set the encoding to UTF8 with [SET CLIENT_ENCODING TO UTF8;]</p>
<p>From here, I moved on to creating two tables, a country table, and a city table. The country table would have the attributes "id" and "name". The city table would have the attributes "id", "name", "country" (A foreign key), and "lat" and "lon" which would be used to represent the city points, and eventually to place markers on the map, using OpenLayers 5.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">SELECT</span> <span class="kw">DISTINCT</span>(sov0name) <span class="kw">FROM</span> populatedplaces <span class="kw">INTO</span> <span class="kw">TABLE</span> country;</a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="kw">ALTER</span> <span class="kw">TABLE</span> country <span class="kw">ADD</span> <span class="kw">COLUMN</span> <span class="kw">id</span> SERIAL;</a></code></pre></div>
<p>The second statement is to create ids for each country, which will be used for foreign keys.</p>
<p>Then, for cities.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">SELECT</span> p.name, c.<span class="kw">id</span> <span class="kw">AS</span> country, p.latitude <span class="kw">AS</span> lat, p.longitude <span class="kw">AS</span> lon</a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">INTO</span> <span class="kw">TABLE</span> city <span class="kw">FROM</span> populatedplaces p <span class="kw">LEFT</span> <span class="kw">JOIN</span> country c <span class="kw">ON</span> p.sov0name <span class="op">=</span> c.name; </a>
<a class="sourceLine" id="cb6-3" title="3"><span class="kw">ALTER</span> <span class="kw">TABLE</span> city <span class="kw">ADD</span> <span class="kw">COLUMN</span> <span class="kw">id</span> SERIAL;</a>
<a class="sourceLine" id="cb6-4" title="4"><span class="kw">ALTER</span> <span class="kw">TABLE</span> city <span class="kw">ADD</span> <span class="kw">CONSTRAINT</span> <span class="kw">key</span> <span class="kw">FOREIGN</span> <span class="kw">KEY</span> (country) <span class="kw">REFERENCES</span> country (<span class="kw">id</span>) MATCH <span class="kw">FULL</span>;</a></code></pre></div>
<p>It is useful to have these tables saved elsewhere in a short form, to be able to be shared. This was done with the '\copy' command, still on the psql command line</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb7-1" title="1">\\<span class="kw">copy</span> (<span class="kw">SELECT</span> \<span class="op">*</span> <span class="kw">FROM</span> country) <span class="kw">to</span></a>
<a class="sourceLine" id="cb7-2" title="2">\<span class="st">&#39;</span><span class="ch">\\</span><span class="st">Users</span><span class="ch">\\</span><span class="st">user</span><span class="ch">\\</span><span class="st">\...</span><span class="ch">\\</span><span class="st">MyFileName.csv\&#39;</span> <span class="kw">with</span> csv</a></code></pre></div>
<p>A similar command was used for the city table.</p>
<p>Small side note, the ID columns were out of order from how I wanted them, so I opened the csv files in a spreadsheet application, and manually copy and pasted in order to switch the columns</p>
<p>It is also useful to save a SQL file to easily import these into a new database. A file named 'data.sql' was created, and had these commands added to it:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb8-1" title="1">\\<span class="kw">copy</span> Country(<span class="kw">id</span>, Name) <span class="kw">FROM</span> \<span class="st">&#39;data/country.csv\&#39;</span> DELIMITER \<span class="st">&#39;,\&#39;</span> CSV <span class="kw">HEADER</span>;</a>
<a class="sourceLine" id="cb8-2" title="2">\\<span class="kw">copy</span> City(<span class="kw">id</span>, name, lat, lon, Country) <span class="kw">FROM</span> \<span class="st">&#39;data/city.csv\&#39;</span> DELIMITER \<span class="st">&#39;,\&#39;</span> CSV <span class="kw">HEADER</span>;</a></code></pre></div>
<h1 id="beaches">Beaches</h1>
<p>The goal for this table was to find the cities that are close to the beach. To do this, coastline data was downloaded from the same Natural Earth website, and the highest resolution (10m) vector data was downloaded, called "Coastlines." What defines close to the beach, for our purposes? We decided that within 40 miles from city center to coastline would be reasonable for now, until we have more user feedback. For reference, 40 miles is about 64,000 meters, which is what will be used in the ST_DWithin() PostGIS function.</p>
<p>In order to accomplish this goal, a temporary table was created, in order to have fast access to PostGIS GEOMETRIES, rather than having to convert from Latitudes and Longitudes in the main function. The main function took over an hour to run on my machine, so time savings was beneficial.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">SELECT</span> <span class="kw">id</span>, ST\_SetSRID(ST\_MakePoint(lon, lat), <span class="dv">4326</span>) <span class="kw">INTO</span> TEMP <span class="kw">TABLE</span></a>
<a class="sourceLine" id="cb9-2" title="2">citygeom <span class="kw">FROM</span> city;</a>
<a class="sourceLine" id="cb9-3" title="3"><span class="kw">ALTER</span> <span class="kw">TABLE</span> citygeom <span class="kw">RENAME</span> <span class="kw">COLUMN</span></a>
<a class="sourceLine" id="cb9-4" title="4">st\_setsrid <span class="kw">TO</span> geom;</a></code></pre></div>
<p>Coastline data was entered into the database using the .sql file created by the shp2pgsql command line executable. I then altered the table to make sure that the SRIDs were the same for both geometries. The ST_DWithin() PostGIS function actually needs the vector data as geographies to caculate distances in meters, so they were convereted using two colons like: table.geom::geography</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">ALTER</span> <span class="kw">TABLE</span> coastline <span class="kw">ALTER</span> <span class="kw">COLUMN</span> geom <span class="kw">TYPE</span> geometry(MULTILINESTRING,</a>
<a class="sourceLine" id="cb10-2" title="2"><span class="dv">4326</span>) <span class="kw">USING</span> ST\_SetSRID(geom,<span class="dv">4326</span>)</a>
<a class="sourceLine" id="cb10-3" title="3"> <span class="kw">SELECT</span></a>
<a class="sourceLine" id="cb10-4" title="4"><span class="kw">DISTINCT</span>(cg.<span class="kw">id</span>), <span class="fu">COALESCE</span>(ST\_DWithin(cl.geom<span class="ch">:geography</span>,</a>
<a class="sourceLine" id="cb10-5" title="5">cg.geom:<span class="ch">:geography</span>, <span class="dv">64000</span>), <span class="kw">false</span>) <span class="kw">INTO</span> <span class="kw">TABLE</span> beaches <span class="kw">FROM</span> coastline cl</a>
<a class="sourceLine" id="cb10-6" title="6"><span class="kw">RIGHT</span> <span class="kw">JOIN</span> citygeom cg <span class="kw">ON</span> ST\_DWithin(cl.geom:<span class="ch">:geography</span>,</a>
<a class="sourceLine" id="cb10-7" title="7">cg.geom:<span class="ch">:geography</span>, <span class="dv">64000</span>); </a></code></pre></div>
<h1 id="elevation">Elevation</h1>
<p>Elevation was obtained from the public dataset GTOPO30, downloaded from <a href="https://earthexplorer.usgs.gov/">Earth Explorer</a>. You are required to make an account, download both java, and a bulk download application, and then place an order, though the information is public and free. This data was slected over newer, more accurate information, because of the size of the download. Uncompressed, this elevation raster data was 1.5 GB, which was less than 10% of the size of the newer GTOPO2010 data. This raster data was imported into postgis with the raster2pgsql function. Using the same city geometries table as before, I was able to get elevation data for each of those points. Perhaps someone can share with me a faster way, as this query took 8 hours to compute on my machine!</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb11-1" title="1"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST\_Value(e.rast, c.geom) <span class="kw">AS</span> elevation <span class="kw">INTO</span> <span class="kw">TABLE</span> elevationdata <span class="kw">FROM</span> citygeom c <span class="kw">LEFT</span> <span class="kw">JOIN</span> elevationRaster e <span class="kw">ON</span> ST\_Contains(ST\_Envelope(e.rast), c.geom);</a></code></pre></div>
<h1 id="climate">Climate</h1>
<p>Climate data is gathered from WorldClim.org. There is monthly data, gathered from 1960-1990.</p>
<blockquote>
<p>Citation: Hijmans, R.J., S.E. Cameron, J.L. Parra, P.G. Jones and A. Jarvis, 2005. Very high resolution interpolated climate surfaces for global land areas. International Journal of Climatology 25: 1965-1978.</p>
</blockquote>
<p>This raster data was included in PostGIS with the raster2pgsql function.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb12-1" title="1"><span class="kw">SELECT</span> x.<span class="kw">id</span>, x.jan, x.feb, x.mar, x.apr, x.may, x.june, x.july, x.aug, x.sept, x.oct, x.nov, x.<span class="dt">dec</span> <span class="kw">INTO</span> <span class="kw">TABLE</span> temp <span class="kw">FROM</span> (</a>
<a class="sourceLine" id="cb12-2" title="2"><span class="kw">SELECT</span> j.<span class="kw">id</span>, j.temp <span class="kw">AS</span> jan, f.temp <span class="kw">AS</span> feb, m.temp <span class="kw">AS</span> mar, a.temp <span class="kw">AS</span> apr, ma.temp <span class="kw">AS</span> may, ju.temp <span class="kw">AS</span> june, jul.temp <span class="kw">AS</span> july, au.temp <span class="kw">AS</span> aug, s.temp <span class="kw">AS</span> sept, o.temp <span class="kw">AS</span> oct, n.temp <span class="kw">AS</span> nov, d.temp <span class="kw">AS</span> <span class="dt">dec</span></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="kw">FROM</span> jantemp <span class="kw">AS</span> j </a>
<a class="sourceLine" id="cb12-4" title="4"><span class="kw">INNER</span> <span class="kw">JOIN</span> febtemp <span class="kw">as</span> f <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> f.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-5" title="5"><span class="kw">INNER</span> <span class="kw">JOIN</span> martemp <span class="kw">as</span> m <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> m.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-6" title="6"><span class="kw">INNER</span> <span class="kw">JOIN</span> aprtemp <span class="kw">as</span> a <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> a.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-7" title="7"><span class="kw">INNER</span> <span class="kw">JOIN</span> maytemp <span class="kw">as</span> ma <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> ma.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-8" title="8"><span class="kw">INNER</span> <span class="kw">JOIN</span> junetemp <span class="kw">as</span> ju <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> ju.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-9" title="9"><span class="kw">INNER</span> <span class="kw">JOIN</span> julytemp <span class="kw">as</span> jul <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> jul.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-10" title="10"><span class="kw">INNER</span> <span class="kw">JOIN</span> augtemp <span class="kw">as</span> au <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> au.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-11" title="11"><span class="kw">INNER</span> <span class="kw">JOIN</span> septtemp <span class="kw">as</span> s <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> s.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-12" title="12"><span class="kw">INNER</span> <span class="kw">JOIN</span> octtemp <span class="kw">as</span> o <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> o.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-13" title="13"><span class="kw">INNER</span> <span class="kw">JOIN</span> novtemp <span class="kw">as</span> n <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> n.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-14" title="14"><span class="kw">INNER</span> <span class="kw">JOIN</span> dectemp <span class="kw">as</span> d <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> d.<span class="kw">id</span></a>
<a class="sourceLine" id="cb12-15" title="15">) <span class="kw">as</span> x <span class="kw">ORDER</span> <span class="kw">BY</span> x.<span class="kw">id</span>;</a></code></pre></div>
<p>This was repeated for precipitation. From this dataset, the temperatures are in C, multiplied by 10 (So that there can be one decimal place of accuracy, while using integer data types, to save space) Precipitation appears to be in mm.</p>
<p>I found UV information at https://neo.sci.gsfc.nasa.gov/view.php?datasetId=AURA_UVI_CLIM_M</p>
<pre><code>raster2pgsql -s 4326 -I -C -M *.tiff public.uvrasters &gt; uv.sql
psql -U postgres -f uv.sql</code></pre>
<div class="sourceCode" id="cb14"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb14-1" title="1"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> januv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;JANUARY.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-2" title="2"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> febuv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;FEB.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-3" title="3"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> maruv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;MARCH.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-4" title="4"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> apruv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;APRIL.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-5" title="5"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> mayuv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;MAY.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-6" title="6"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> junuv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;JUNE.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-7" title="7"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> juluv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;JULY.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-8" title="8"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> auguv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;AUGUST.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-9" title="9"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> sepuv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;SEPTEMBER.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-10" title="10"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> octuv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;OCTOBER.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-11" title="11"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> novuv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;NOVEMBER.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-12" title="12"><span class="kw">SELECT</span> c.<span class="kw">id</span>, ST_Value(u.rast, ST_SetSRID(ST_Point(c.lon, c.lat), <span class="dv">4326</span>)) <span class="kw">as</span> uvidx <span class="kw">into</span> temp <span class="kw">table</span> decuv <span class="kw">from</span> city c, uvrasters u <span class="kw">where</span> u.filename <span class="op">=</span> <span class="st">&#39;DECEMBER.TIFF&#39;</span>;</a>
<a class="sourceLine" id="cb14-13" title="13"></a>
<a class="sourceLine" id="cb14-14" title="14"><span class="kw">SELECT</span> x.<span class="kw">id</span>, x.jan, x.feb, x.mar, x.apr, x.may, x.june, x.july, x.aug, x.sept, x.oct, x.nov, x.<span class="dt">dec</span> <span class="kw">INTO</span> <span class="kw">TABLE</span> uvindex <span class="kw">FROM</span> (</a>
<a class="sourceLine" id="cb14-15" title="15"><span class="kw">SELECT</span> j.<span class="kw">id</span>, j.uvidx <span class="kw">AS</span> jan, f.uvidx <span class="kw">AS</span> feb, m.uvidx <span class="kw">AS</span> mar, a.uvidx <span class="kw">AS</span> apr, ma.uvidx <span class="kw">AS</span> may, ju.uvidx <span class="kw">AS</span> june, jul.uvidx <span class="kw">AS</span> july, au.uvidx <span class="kw">AS</span> aug, s.uvidx <span class="kw">AS</span> sept, o.uvidx <span class="kw">AS</span> oct, n.uvidx <span class="kw">AS</span> nov, d.uvidx <span class="kw">AS</span> <span class="dt">dec</span></a>
<a class="sourceLine" id="cb14-16" title="16"><span class="kw">FROM</span> januv <span class="kw">AS</span> j </a>
<a class="sourceLine" id="cb14-17" title="17"><span class="kw">INNER</span> <span class="kw">JOIN</span> febuv <span class="kw">as</span> f <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> f.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-18" title="18"><span class="kw">INNER</span> <span class="kw">JOIN</span> maruv <span class="kw">as</span> m <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> m.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-19" title="19"><span class="kw">INNER</span> <span class="kw">JOIN</span> apruv <span class="kw">as</span> a <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> a.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-20" title="20"><span class="kw">INNER</span> <span class="kw">JOIN</span> maruv <span class="kw">as</span> ma <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> ma.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-21" title="21"><span class="kw">INNER</span> <span class="kw">JOIN</span> junuv <span class="kw">as</span> ju <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> ju.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-22" title="22"><span class="kw">INNER</span> <span class="kw">JOIN</span> juluv <span class="kw">as</span> jul <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> jul.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-23" title="23"><span class="kw">INNER</span> <span class="kw">JOIN</span> auguv <span class="kw">as</span> au <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> au.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-24" title="24"><span class="kw">INNER</span> <span class="kw">JOIN</span> sepuv <span class="kw">as</span> s <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> s.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-25" title="25"><span class="kw">INNER</span> <span class="kw">JOIN</span> octuv <span class="kw">as</span> o <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> o.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-26" title="26"><span class="kw">INNER</span> <span class="kw">JOIN</span> novuv <span class="kw">as</span> n <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> n.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-27" title="27"><span class="kw">INNER</span> <span class="kw">JOIN</span> decuv <span class="kw">as</span> d <span class="kw">ON</span> j.<span class="kw">id</span> <span class="op">=</span> d.<span class="kw">id</span></a>
<a class="sourceLine" id="cb14-28" title="28">) <span class="kw">as</span> x <span class="kw">ORDER</span> <span class="kw">BY</span> x.<span class="kw">id</span>;</a>
<a class="sourceLine" id="cb14-29" title="29"></a>
<a class="sourceLine" id="cb14-30" title="30">\<span class="kw">copy</span> (<span class="kw">SELECT</span> <span class="op">*</span> <span class="kw">FROM</span> uvindex) <span class="kw">to</span> <span class="st">&#39;C:\Users\...\database\uv.csv&#39;</span> <span class="kw">with</span> csv</a></code></pre></div>
<h1 id="air-pollution">Air Pollution</h1>
<p>Air pollution data was obtained from The World Health Organization <a href="https://www.who.int" class="uri">website</a>, which include PM25 (small particle matter) and PM10 (large particle matter) data. We combined these values to use in our overall air pollution levels.</p>
<p>Since there was a possibility of different spellings of cities or smaller cities that did not have readings, we used the air pollution latitute and longitude points to find the closest reading with 100 miles.</p>
<p>This was done by comparing the geometric points created from latitude and longitude using PostGIS. To create the points and place them into a TEMP table, we used:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb15-1" title="1"><span class="kw">SELECT</span> <span class="kw">id</span>, ST\_SetSRID(ST\_MakePoint(lon, lat), <span class="dv">4326</span>) <span class="kw">INTO</span> TEMP <span class="kw">TABLE</span></a>
<a class="sourceLine" id="cb15-2" title="2">citygeom <span class="kw">FROM</span> city;</a>
<a class="sourceLine" id="cb15-3" title="3"><span class="kw">SELECT</span> <span class="kw">id</span>, ST\_SetSRID(ST\_MakePoint(lon, lat), <span class="dv">4326</span>) <span class="kw">INTO</span> TEMP <span class="kw">TABLE</span></a>
<a class="sourceLine" id="cb15-4" title="4">air<span class="op">-</span>poll<span class="op">-</span>temp <span class="kw">FROM</span> air<span class="op">-</span>poll;</a></code></pre></div>
<p>Then used this query to select the nearest reading within a 100 mile range:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb16-1" title="1"><span class="kw">SELECT</span> <span class="kw">id</span>, ST\_SetSRID(ST\_MakePoint(lon, lat), <span class="dv">4326</span>) <span class="kw">INTO</span> TEMP <span class="kw">TABLE</span> citygeom <span class="kw">FROM</span> city;</a>
<a class="sourceLine" id="cb16-2" title="2"><span class="kw">SELECT</span> <span class="kw">DISTINCT</span>(cg.<span class="kw">id</span>), <span class="fu">COALESCE</span>(ST\_DWithin(ap.geom<span class="ch">:geography</span>, cg.geom:<span class="ch">:geography</span>, <span class="dv">161000</span>), <span class="kw">false</span>)</a>
<a class="sourceLine" id="cb16-3" title="3"><span class="kw">INTO</span> <span class="kw">TABLE</span> air<span class="op">-</span>pollution <span class="kw">FROM</span> air<span class="op">-</span>poll<span class="op">-</span>temp ap</a>
<a class="sourceLine" id="cb16-4" title="4"><span class="kw">RIGHT</span> <span class="kw">JOIN</span> citygeom cg <span class="kw">ON</span> ST\_DWithin(ap.geom:<span class="ch">:geography</span>, cg.geom:<span class="ch">:geography</span>, <span class="dv">161000</span>);</a></code></pre></div>
<h1 id="airports">Airports</h1>
<p>Airport data was found from the website <a href="http://ourairports.com/data/">Our Airports</a>.</p>
<p>This data was etnered into the database similar to the Air Pollution data, using the PostGIS geometric points and comparing distance between, this time using only a 50 mile range.</p>
<h1 id="internet-speeds">Internet Speeds</h1>
<p>Raw internet speed data was retrieved from a <a href="https://s3-eu-west-1.amazonaws.com/assets.cable.co.uk/broadband-speedtest/worldwide-broadband-speed-league-2018.xlsx">spreadsheet file</a> provided by a private <a href="https://www.cable.co.uk/broadband/speed/worldwide-speed-league/">broadband company</a> (Cable). The source of data is from <a href="https://www.measurementlab.net/">M-lab</a>, a coalition of reasearch institutes involved with internet statitics:</p>
<blockquote>
<p>The data was collected for the second year in a row across the 12 months up to 29 May this year by M-Lab, a partnership between New America’s Open Technology Institute, Google Open Source Research, Princeton University’s PlanetLab and other supporting partners, and compiled by Cable</p>
</blockquote>
<p>After copying the raw values from the above spreadsheet value into a CSV file (internet_speed.csv), the data was inserted into the database with the following command:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb17-1" title="1"><span class="co">-- Internet Speed</span></a>
<a class="sourceLine" id="cb17-2" title="2">\<span class="kw">copy</span> Internet_Speed(Country, Speed) <span class="kw">FROM</span> <span class="st">&#39;data/internet_speed.csv&#39;</span> DELIMITER <span class="st">&#39;,&#39;</span> CSV <span class="kw">HEADER</span>;</a></code></pre></div>
<p>This data was only found at the country level. It was merged with our countries, on the country name. There ended up being some countries that were not in one database or the other, such as Somaliland, or Aruba. Some of these, we just left as NULL values. There were other countries that we had data for, but the names weren’t listed exactly the same, such as “United States” and “United States of America.” For these, there ended up only being a handful, and they were easy to identify. This was done using</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode sql"><code class="sourceCode sql"><a class="sourceLine" id="cb18-1" title="1"><span class="kw">SELECT</span> country.name <span class="kw">FROM</span> country <span class="kw">WHERE</span> country.name <span class="kw">NOT</span> <span class="kw">IN</span> (<span class="kw">SELECT</span> country <span class="kw">FROM</span> internet_speed);</a></code></pre></div>
<p>Crafting a statement like this for both databases (ie, finding the countries in the country table that were not in the internet table, and finding the countries that were in the internet table that were not in the country table) gave us two lists we could compare by hand, and just copy the extra missing information into our final table.</p>
<h1 id="references">References</h1>
<p>Cities: <a href="https://www.naturalearthdata.com/downloads/10m-cultural-vectors/" class="uri">https://www.naturalearthdata.com/downloads/10m-cultural-vectors/</a>, Populated Places dataset</p>
<p>Countries: <a href="https://www.naturalearthdata.com/downloads/10m-cultural-vectors/" class="uri">https://www.naturalearthdata.com/downloads/10m-cultural-vectors/</a>, Populated Places dataset</p>
<p>Population: <a href="https://www.naturalearthdata.com/downloads/10m-cultural-vectors/" class="uri">https://www.naturalearthdata.com/downloads/10m-cultural-vectors/</a>, Populated Places dataset</p>
<p>Elevation: <a href="https://earthexplorer.usgs.gov/" class="uri">https://earthexplorer.usgs.gov/</a>, GTOPO30 Dataset, all tiles</p>
<p>Beaches: <a href="https://www.naturalearthdata.com/downloads/10m-physical-vectors/" class="uri">https://www.naturalearthdata.com/downloads/10m-physical-vectors/</a>, Coastline Vectors</p>
<p>Temperature: <a href="https://www.worldclim.org/version1" class="uri">https://www.worldclim.org/version1</a>, Current Conditions, Average Temperature, 5 minutes</p>
<p>Precipitation: <a href="https://www.worldclim.org/version1" class="uri">https://www.worldclim.org/version1</a>, Current Conditions, Average Precipitation, 5 minutes</p>
<p>UV index: <a href="https://neo.sci.gsfc.nasa.gov/view.php?datasetId=AURA_UVI_CLIM_M" class="uri">https://neo.sci.gsfc.nasa.gov/view.php?datasetId=AURA_UVI_CLIM_M</a></p>
<p>Air Pollution: <a href="https://www.who.int/airpollution/data/cities/en/" class="uri">https://www.who.int/airpollution/data/cities/en/</a>, Ambient air pollution dataset</p>
<p>Airports: <a href="http://ourairports.com/data/" class="uri">http://ourairports.com/data/</a>, Airport dataset</p>
<p>Internet: <a href="https://www.cable.co.uk/broadband/speed/worldwide-speed-league/" class="uri">https://www.cable.co.uk/broadband/speed/worldwide-speed-league/</a>, <a href="https://s3-eu-west-1.amazonaws.com/assets.cable.co.uk/broadband-speedtest/worldwide-broadband-speed-league-2018.xlsx">data file</a></p>
<p>Purchasing Power Parity: <a href="https://data.worldbank.org/indicator/PA.NUS.PPPC.RF?end=2017&amp;start=2017&amp;view=map" class="uri">https://data.worldbank.org/indicator/PA.NUS.PPPC.RF?end=2017&amp;start=2017&amp;view=map</a></p>
<p>Severe poverty index: <a href="http://hdr.undp.org/en/composite/MPI" class="uri">http://hdr.undp.org/en/composite/MPI</a></p>
<p>Palm Trees: <a href="https://en.wikipedia.org/wiki/Arecaceae" class="uri">https://en.wikipedia.org/wiki/Arecaceae</a></p>
